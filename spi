#!/bin/sh
#
# Spi - SliTaz Raspberry Pi Tool
#
# Copyright (C) 2012-2014 SliTaz ARM - BSD License
# Author: Christophe Lincoln <pankso@slitaz.org>
#
. /lib/libtaz.sh

# Paths
[ "$work" ] || work="$(pwd)"
distro="$work/distro"
rpi="$work/rpi"
data="$rpi/distro/data"
boot="$rpi/distro/boot"
rootfs="$rpi/distro/rootfs"
rpi_git="$rpi/git"
kernel="$rpi_git/linux"
firmware="$rpi_git/firmware"
tools="$rpi_git/tools"

# URLs
rpi_mirror="http://mirror.slitaz.org/arm/rpi/"
fw_url="https://github.com/raspberrypi/firmware/raw/master/boot/"
tools_url="https://raw.github.com/raspberrypi/tools/master/mkimage/"
rpi_git_url="git://github.com/raspberrypi/"

# Lists
fwlist="bootcode.bin fixup.dat start.elf"
toolslist="imagetool-uncompressed.py args-uncompressed.txt \
boot-uncompressed.txt"

#
# Functions
#

usage() {
	cat << EOT

$(boldify "Usage:") $(basename $0) [command] [--option]

$(boldify "Commands:")
  info          Display paths and distro info
  install       Install SliTaz RPi to sdcard
  gen           Generate a new SliTaz RPi distro
  cook-linux    Build the Raspberry Pi Linux kernel
  get-linux     Get a the SliTaz RPi linux package
  get-fw        Download or update RPi Firmware
  clone-fw      Clone the RPi Firmware repository
  get-tools     Download or update RPi Tools (mkimage)
  get-prebuilt  Get a prebuilt SliTaz ARM toolchain
  oclock        Display overclocking information

$(boldify "Options:")
  --up          Update firmware, tools or kernel
  --clean       Clean the distro tree (Sat can also be used)
  --turbo       Force the RPi to run at the highest arm_freq
  --oclock=     Set the RPi overclocking mode

EOT
}

error() {
	echo "[ $(colorize 31 'ERROR') ] $@"
}

header() {
	newline
	boldify "$@"
	separator
}

# Get minimal RPi firmware
get_fw() {
	mkdir -p $firmware/boot
	for fw in $fwlist
	do
		[ "$up" ] && rm -f $firmware/boot/$fw
		if [ ! -f "$firmware/boot/$fw" ]; then
			echo -n "Fetching: $fw"
			wget -q --no-check-certificate ${fw_url}${fw} \
				-O $firmware/boot/${fw}; status
		fi
	done
}

# Get all RPi firmware
clone_fw() {
	[ -d "${rpi_git}/firmware" ] && return 0
	mkdir -p ${rpi_git} && cd ${rpi_git}
	git clone --depth 1 ${rpi_git_url}firmware.git
}

# Get RPi tools
get_tools() {
	mkdir -p $tools
	for t in $toolslist
	do
		[ "$up" ] && rm -f ${tools}/${t}
		if [ ! -f "$data/$t" ]; then
			echo -n "Fetching: $t"
			wget -q --no-check-certificate ${tools_url}${t} \
				-O ${tools}/${t}; status
		fi
	done
}

# Configure overclocking
set_oclock() {
	case "$oclock" in
		none)
			arm_freq=700
			core_freq=250
			sdram_freq=400
			over_voltage=0 ;;
		modest)
			arm_freq=800
			core_freq=300
			sdram_freq=400
			over_voltage=0 ;;
		medium)
			arm_freq=900
			core_freq=333
			sdram_freq=450
			over_voltage=2 ;;
		hight)
			arm_freq=950
			core_freq=450
			sdram_freq=450
			over_voltage=6 ;;
		turbo)
			arm_freq=1000
			core_freq=500
			sdram_freq=500
			over_voltage=6 ;;
	esac
	cat >> ${boot}/config.txt << EOT
arm_freq=$arm_freq
core_freq=$core_freq
sdram_freq=$sdram_freq
over_voltage=$over_voltage
EOT
}

#
# Commands
#

case "$1" in
	info)
		header "SliTaz Raspberry Pi info"
		echo "Firmware : $fwlist" 
		echo "RPi path : $rpi"
		colorize 36 "/boot/cmdline.txt:"
		cat ${boot}/cmdline.txt
		colorize 36 "/boot/config.txt:"
		cat ${boot}/config.txt
		separator && newline ;;
	
	install)
		rpiboot="/media/rpi/boot"
		rpiroot="/media/rpi/rootfs"
		header "SliTaz Raspberry Pi install"
		if [ ! "$dev" ]; then
			echo "Missing: --dev= cmdline option" && exit 1
		fi
		
		# Store sdcard partition(s) list
		fdisk -l /dev/${dev} | grep "^/dev/$dev" | awk '{print $1}' \
			> ${data}/sdcard.part
		partnb=$(cat ${data}/sdcard.part | wc -l)
		if [ "$partnb" != 3 ]; then
			error "SliTaz RPi needs 3 partitions on the sdcard" 
			newline && exit 1
		fi
		
		# Mount sdcard
		if mount | grep -q "^/dev/$dev[1-3]"; then
			debug "Unmounting: /dev/$dev"
			umount /dev/${dev}1 2>/dev/null || exit 1
			umount /dev/${dev}3 2>/dev/null || exit 1
		fi
		echo -n "Mounting: /dev/$dev partitions"
		mkdir -p ${rpiboot} ${rpiroot}
		mount /dev/${dev}1 ${rpiboot}
		mount /dev/${dev}3 ${rpiroot}; status
		echo -n "Installing: boot files"
		cp -rf ${boot}/* ${rpiboot}; status
		echo -n "Installing: rootfs files"
		cp -a ${rootfs}/* ${rpiroot}; status
		
		# Unmount
		echo -n "Unmounting: RPi sdcard"
		umount ${rpiboot} || exit 1
		umount ${rpiroot} || exit 1
		status
		
		# Boot flag
		#echo -n "Setting boot flag on: /dev/${dev}1"
		#fdisk /dev/${dev} >/dev/null << EOF
#a
#1
#w
#EOF
		#status
		rm -f ${data}/sdcard.part
		separator && newline ;;
		
	ls-dev)
		newline
		fdisk -l | grep "^Disk /dev/sd*" 
		newline ;;
	
	gen)
		# Separate boot files since the Raspberry Pi boots off a FAT32 /boot 
		# partition on the sdcard.
		: ${flavor=rpi}
		: ${oclock=none}
		check_root
		rm -rf ${rootfs} ${boot}
		mkdir -p ${boot}
		
		# Use the rootfs generated by sat
		if [ ! -x "/usr/bin/sat" ]; then
			error "Sat is not installed" && exit 1
		fi
		[ "$clean" ] && sat clean --work="$work"
		if [ ! -d "$distro/rootfs/etc" ]; then
			sat gen --work="$work" --flavor="$flavor" \
				--kmap --spk --noinit --rpi
		fi
		header "SliTaz Raspberry Pi distro"
		dsize="$(du -sh ${distro}/rootfs | awk '{print $1}')"
		echo -n "Copying: rootfs ($dsize)"
		cp -a ${distro}/rootfs ${rootfs}; status
		
		# Boot firmware
		echo -n "Copying: firmware files..."
		get_fw
		for fw in $fwlist
		do
			cp $firmware/boot/${fw} ${boot}
		done
		status
		
		# SliTaz Raspberry Pi custom rootfs files. Make sure all files 
		# belong to root
		if [ -d "$work/rootfs" ]; then
			size=$(du -sh $work/rootfs | awk '{print $1}')
			echo -n "Copying: SliTaz RPi rootfs ($size)"
			tmp=$distro/tmp-$$
			mkdir -p $tmp
			cp -r $work/rootfs/* $tmp
			chown -R root.root $tmp
			cp -a $tmp/* ${rootfs} && rm -rf $tmp
			status
		fi
		
		# /boot/config.txt
		echo -n "Creating: /boot/config.txt"
		echo 'kernel=kernel.img' > ${boot}/config.txt
		set_oclock; status
		if [ "$turbo" ]; then
			echo "force_turbo=1" >> ${boot}/config.txt
		fi
		
		# /etc/fstab
		echo -n "Creating: /etc/fstab"
		cat > ${rootfs}/etc/fstab << EOT
# /etc/fstab: Slitaz ARM static filesystems.
#
proc              /proc       proc     defaults           0 0
sysfs             /sys        sysfs    defaults           0 0
/dev/mmcblk0p1    /boot       auto     noauto,noatime     1 2
/dev/mmcblk0p2    none        swap     sw                 0 0
/dev/mmcblk0p3    /           ext4     noatime            0 1
EOT
		status
		
		# Kernel
		kvers=$(ls $data/linux-*/fs/lib/modules)
		kpkg="$rootfs/var/lib/tazpkg/installed/linux"
		if [ -d "$data/linux-$kvers/fs" ]; then
			echo -n "Copying: Linux Kernel $kvers"
			rm -rf ${rootfs}/lib/modules
			cp -rf ${data}/linux-${kvers}/fs/lib/* ${rootfs}/lib
			cp -f  ${data}/linux-${kvers}/fs/boot/* ${boot}
			mkdir -p ${kpkg}
			cd ${data}/linux-${kvers}
			cp -f files.list md5sum receipt ${kpkg}
			status
		else
			echo "RPi Kernel: not used"
		fi
		mkdir -p ${rootfs}/boot
		
		# RPi VC libraries
		if [ "$vc" ]; then
			echo "Installing: VC libraries"
			echo "TODO"
		fi
		
		separator
		echo -n "Boot: $(du -sh $boot | awk '{print $1}') "
		echo "- Rootfs: $(du -sh $rootfs | awk '{print $1}')" 
		newline ;;
	
	cook-linux)
		# Native SliTaz Toolchain and cross toolchain must be installed
		check_root
		#: ${arch=armv6hf}
		: ${arch=arm}
		install="$data/linux-install"
		if [ ! -d "/cross/$arch" ]; then
			error "Missing cross toolchain in: /cross/$arch"
			exit 1
		fi
		# Kernel source
		[ -d "$kernel" ] || git clone --depth 1 ${rpi_git_url}linux.git
		
		if [ ! -d "$install" ]; then
			cd ${kernel}
			export PATH=$PATH:/cross/${arch}/tools/bin
			export HOST_SYSTEM=${arch}-slitaz-linux-gnueabi
			make ARCH=arm bcmrpi_defconfig &&
			make ARCH=arm CROSS_COMPILE=${HOST_SYSTEM}- zImage &&
			make ARCH=arm CROSS_COMPILE=${HOST_SYSTEM}- modules &&
			make ARCH=arm CROSS_COMPILE=${HOST_SYSTEM}- \
				INSTALL_MOD_PATH=${install} modules_install || exit 1
			mkdir -p ${install}/boot
			cp -a arch/arm/boot/zImage ${install}/boot
		fi
		
		# Compress all modules
		#echo -n "Searching all modules to compress them... "
		#find . -name "*.ko" -exec xz '{}' \; 2> /dev/null
		
		# Pack
		fs="$data/linux-$kvers/fs"
		kvers=$(ls ${install}/lib/modules)
		newline
		echo "Kernel version: $kvers"
		if [ -d "$install" ]; then
			rm -rf ${data}/linux-${kvers}
			mkdir -p ${data}/linux-${kvers}
			cp -a ${install} ${fs}
			rm ${fs}/lib/modules/build ${fs}/lib/modules/source
		fi
		get_tools
		echo "Compressing: zImage to kernel.img"
		cd ${tools}
		python imagetool-uncompressed.py ${fs}/boot/zImage
		cd ${data}
		mv kernel.img ${fs}/boot && rm ${fs}/boot/zImage
		echo "Creating package: receipt"
		cat > linux-$kvers/receipt << EOT
# SliTaz package receipt

PACKAGE="linux"
VERSION="$kvers"
SHORT_DESC="SliTaz Linux Kernel for the Raspberry Pi."
WEB_SITE="http://www.kernel.org"

EOT
		tazpkg pack linux-$kvers ;;
	
	get-fw)
		get_fw ;;
		
	get-tools)
		get_tools ;;
		
	get-linux)
		# Precook RPi kernel
		mkdir -p ${data}
		rm -f ${data}/linux-version.txt
		if busybox wget -q -s ${rpi_mirror}/last-linux.txt; then
			echo -n "Fetching latest Kernel string..."
			wget -q ${rpi_mirror}/last-linux.txt \
				-O ${data}/linux-version.txt || exit 1
			status
		else
			echo "Mirror is unreachable" && exit 1
		fi
		kvers=$(cat $data/linux-version.txt)
		[ "$up" ] && rm -rf ${data}/linux-${kvers}*
		echo "Kernel version: $kvers"
		# Download
		if [ ! -f "$data/linux-$kvers.tazpkg" ]; then
			echo -n "Fetching latest Linux package..."
			wget -q ${rpi_mirror}/linux-${kvers}.tazpkg \
				-O ${data}/linux-${kvers}.tazpkg; status
		fi
		# Extract
		if [ ! -d "$data/linux-$kvers" ]; then
			cd ${data} && tazpkg extract linux-${kvers}.tazpkg
		fi ;;
		
	get-prebuilt)
		# --> in cross ??
		: ${arch=arm}
		name="slitaz-$arch-toolchain"
		vers="20140304"
		tarball="$name-$vers.tar.bz2"
		url="http://mirror.slitaz.org/packages/cross/"
		mkdir -p /cross
		cd /cross
		if [ ! -f "$tarball" ]; then
			if busybox wget -qs ${url%/}/${tarball}; then
				busybox wget ${url%/}/${tarball}
			else
				echo "Toolchain URL is unreachable" && exit 1
			fi 
		fi
		if [ ! -d "${name}-${vers}" ]; then
			echo "Extracting: $tarball"
			tar xjf ${tarball}
		fi
		echo "Copying: ${name}-${vers}/${arch}"
		mkdir -p ${arch}
		cp -a ${name}-${vers}/${arch}/* ${arch} 
		echo "Tools path: /cross/${arch}/tools/bin" ;;
	
	clone-fw)
		clone_fw ;;
	
	oclock)
		cat << EOT

$(boldify "Overclocking modes:")
none    700MHz  ARM 250MHz core 400MHz SDRAM 0 overvolt
modest  800MHz  ARM 300MHz core 400MHz SDRAM 0 overvolt
medium  900MHz  ARM 333MHz core 450MHz SDRAM 2 overvolt
high    950MHz  ARM 450MHz core 450MHz SDRAM 6 overvolt
turbo   1000MHz ARM 500MHz core 500MHz SDRAM 6 overvolt

EOT
		if [ -f "$boot/config.txt" ]; then
			boldify "Current config.txt:"
			cat ${boot}/config.txt
			newline
		fi ;;
	*) usage ;;
esac
exit 0
