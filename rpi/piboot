#!/bin/sh
#
# /sbin/piboot: SliTaz Raspberry Pi bootloader and web boot!
#
# (C) 2014 SliTaz GNU/Linux - ...
#
# usage: insert 'rdinit=/sbin/piboot' (if you load an initramfs)
# or 'init=/sbin/piboot' in the kernel command line /boot/cmdline.txt
#
# AUTHORS: Pascal Bellard <pascal.bellard@slitaz.org>
#

# Check for depends ...
LOG=/var/log/$(basename $0).log
mv -f $LOG $LOG.0 2>/dev/null
while read file pkg ; do
	[ "$(which $file)" ] && continue
	echo "Can't find $file. Please install $pkg." >> $LOG
done <<EOT
kexec	kexec-tools
dialog	dialog
EOT
[ -s $LOG ] && exec /init

cmdlinearg()
{
	grep -q $1= /proc/cmdline && sed "s/.*$1=\([^ ]*\).*/\1/" </proc/cmdline
}

get()
{
	grep -sq ^$1 $2 && sed "/^$1/!d;s/$1[ :=]*//" $2
}

list_entry()
{
	n=0
	while true ; do	
		n=$(($n+1))
		eval KEYWORD="\$KEYWORD_$n"
		eval ENTRY="\$ENTRY_$n"
		[ "$KEYWORD" ] || break
		[ "$KEYWORD" == "$default" ] && ENTRY="$ENTRY (default)"
		echo -n "$KEYWORD \"$ENTRY\" "
	done
}

edit_menu()
{
while true; do

	eval KERNEL="\$KERNEL_$1"
	eval INITRD="\$INITRD_$1"
	eval CMDLINE="\$CMDLINE_$1"
	extra="--extra-button --extra-label ${msgsave:-Save}"
	[ "$READONLY" ] && extra=''

	exec 3>&1
	value=$($DIALOG  --clear \
		--title "${edittitle:-Edit menu}" \
		--ok-label "${msgedit:-Edit}" \
		--cancel-label "${msgdone:-Done}" \
		$extra \
		--menu "" 20 72 14 \
		Kernel "$KERNEL" \
		Initramfs "$INITRD" \
		Cmdline "$CMDLINE" 2>&1 1>&3 )
	retval=$?
	exec 3>&-
	
	case $retval in
	1|255) return ;;
	3)	cp $mnt/$KEYWORD/config.txt /tmp/config.txt
		sed -i '/^kernel/d;/^initrd/d;/^cmdline/d' /tmp/config.txt
		echo "kernel=$KERNEL" >> /tmp/config.txt
		[ "$INITRD" ] && echo "initrd $INITRD" >> /tmp/config.txt
		[ "$CMDLINE" ] && echo "cmdline=$CMDLINE" >> /tmp/config.txt
		mount -o remount,rw $mnt
		cp /tmp/config.txt $mnt/$KEYWORD/config.txt
		mount -o remount,ro $mnt ;;
	esac

	exec 3>&1
	case $value in
	Kernel)
		data=$($DIALOG  --clear --title "${msgselectkernel:-Select the kernel}" \
			 --fselect "$mnt/$KEYWORD/$KERNEL" 10 72 2>&1 1>&3) ;;
	Initramfs)
		data=$($DIALOG  --clear --title "${msgselectinitrd:-Select the initramfs}" \
			 --fselect "$mnt/$KEYWORD/$INITRD" 10 72 2>&1 1>&3) ;;
	Cmdline)
		data=$($DIALOG  --clear --title "${msgeditcmdline:-Edit cmdline}" \
			 --inputbox "Cmdline" 20 72 2>&1 "$CMDLINE" 1>&3) ;;
	esac
	retval=$?
	exec 3>&-
	
	case $retval in
	1|255) continue ;;
	esac
	
	case $value in
	Kernel)		[ -f $data ] && eval KERNEL_$1=\$data ;;
	Initramfs)	[ -f $data ] && eval INITRD_$1=\$data ;;
	Cmdline)	eval CMDLINE_$1=\$data ;;
	esac
done
}

web_boot_entry()
{
	[ "$USING_WEBBOOT" == "1" ] ||
	echo -n 'WebBoot "boot from Internet"'
}

web_boot()
{
	USING_WEBBOOT=1
	[ -s $mnt/network.conf ] && cp $mnt/network.conf /etc
	/etc/init.d/network.sh start
	webpath=$(get webpath $mnt/menu.txt)
	[ "$webpath" ] || webpath=http://mirror.slitaz.org/pxe/arm/boot.php
	for url in ${webpath//,/ }; do
		wget -O /root/webboot.sh \
		  "$url?mac=$(cat /sys/class/net/eth0/address)" 2>&1 > /dev/null
		[ -s /root/webboot.sh ] || continue
		. /root/webboot.sh
		webprefix=$(dirname $url)
		editbutton=""
		break
	done
}

web_get()
{
	case "$1" in
	*torrent) # See http://sl-lab.it/dokuwiki/doku.php/tesi:boottorrent_en
		[ -z "$(which aria2)" ] &&
			echo "Can't find aria2." >> $LOG &&
			exec /init

		wget -O /root/webboot.torrent "$1"
		aria2c --enable-dht=false --disable-ipv6=true --seed-time=0 \
			--file-allocation=none -j5 /root/webboot.torrent

		if ls | grep -q rootfs; then
			file=$(ls | grep -q rootfs)
			cat $file >> $2
			rm -f $file
		else
			mv $(ls *mage* *linu* 2> /dev/null) $2
		fi
		rm -f /root/webboot.torrent ;;
	*)
		wget -O - "$1" >> $2
	esac
}

: ${DIALOG=dialog}

mount -t proc proc /proc
mount -t sysfs sys /sys
BOOTDEV=$(cmdlinearg bootdev)
mnt=/mnt
mount -t devtmpfs /dev /dev

# A dirty hack: why devtmpfs does not mount ? 
# pankso@20140421: It mount fine on my side
[ -b /dev/mmcblk0p1 ] || mknod -m 660 /dev/mmcblk0p1 b 179 1

mount -r /dev/${BOOTDEV:-mmcblk0p1} $mnt
umount /dev


# Get global variables

title="$(get title $mnt/menu.txt)"
subtitle="$(get subtitle $mnt/menu.txt)"

timeout="$(get timeout $mnt/menu.txt)"
timeout="${timeout:-30}"

default="$(get default $mnt/menu.txt)"

editbutton='--extra-button --extra-label "Edit"'
grep -qs ^noedit $mnt/menu.txt && editbutton=

READONLY=
grep -qs ^readonly $mnt/menu.txt && READONLY=ON

USING_WEBBOOT=
grep -qs ^nowebboot $mnt/menu.txt && USING_WEBBOOT=1

kmap="$(get kmap $mnt/menu.txt)"
[ "$kmap" ] && ! loadkeys $kmap && loadkmap < /usr/share/kmap/$kmap.kmap

edittitle="$(get edittitle $mnt/menu.txt)"

# Get locale

msgsave="$(get msgsave $mnt/menu.txt)"
msgedit="$(get msgedit $mnt/menu.txt)"
msgdone="$(get msgdone $mnt/menu.txt)"
msgboot="$(get msgboot $mnt/menu.txt)"
msghalt="$(get msghalt $mnt/menu.txt)"
msgselectkernel="$(get msgselectkernel $mnt/menu.txt)"
msgselectinitrd="$(get msgselectinitrd $mnt/menu.txt)"
msgeditcmdline="$(get msgeditcmdline $mnt/menu.txt)"
msgkexec="$(get msgkexec $mnt/menu.txt)"

# Get OS variables

n=0
for i in $mnt/*/ ; do
	KERNEL="$(get kernel $i/config.txt)"
	[ -z "$KERNEL" ] && [ -s $i/kernel.img ] && KERNEL="kernel.img"
	[ "$KERNEL" ] || continue
	n=$(($n+1))
	eval KERNEL_$n="\$KERNEL"
	eval INITRD_$n="\$(get initramfs \$i/config.txt)"
	eval CMDLINE_$n="\$(cat \$i/cmdline.txt)"
	eval SAVEDEFAULT_$n="\$(get savedefault \$i/config.txt)"
	eval KEYWORD_$n="\$(basename \$i)"
	eval ENTRY_$n="\$(get entry \$i/menu.txt)"
done


# Main loop

while true; do

	exec 3>&1
	value=$(sh 2>&1 1>&3 <<EOT
	$DIALOG  --clear \
		--title "${title:-Boot menu}" \
		$editbutton \
		--ok-label "${msgboot:-Boot}" \
		--cancel-label "${msghalt:-Halt}" \
		--timeout $timeout \
		--menu "${subtitle:-Default boot in $timeout seconds}" 20 72 14 \
		$(list_entry) $(web_boot_entry) \
		Continue "${msgkexec:-Execute SliTaz boot sequence}"
EOT
)
	retval=$?
	exec 3>&-
	
	n=0
	while true; do
		n=$(($n+1))
		eval KEYWORD="\$KEYWORD_$n"
		[ "$KEYWORD" ] || break
		[ "$KEYWORD" == "$value" ] && break
		case $value in
		*timeout)	[ "$KEYWORD" == "$default" ] && break ;;
		esac
	done
	
	case $retval in
		0)
			case "$value" in
			*WebBoot) web_boot ;;
			*)	break ;;
			esac ;;
		1|255)
			case "$value" in
			*timeout) break ;;
			esac
			umount $mnt
			umount /sys
			umount /proc
			poweroff -f ;;
		3)
			[ "$KEYWORD" ] && edit_menu $n ;;
	esac
done


# Start OS

case "$KEYWORD" in

''|Continue)
	KEXEC= ;;

*)
	eval KERNEL="\$KERNEL_$n"
	eval INITRD="\$INITRD_$n"
	eval CMDLINE="\$CMDLINE_$n"
	eval SAVEDEFAULT="\$SAVEDEFAULT_$n"

	if [ "$webprefix" ]; then
		cd /root
		web_get $webprefix/$KEYWORD/$KERNEL vmlinuz
		KERNEL=vmlinuz
		for i in ${INITRD//,/ }; do
			web_get $webprefix/$KEYWORD/$i rootfs.gz
			n=$(stat -c %s rootfs.gz)
			n=$(($n % 4))
			[ $n -eq 0 ] && continue
			dd if=/dev/zero bs=1 count=$((4 - $n)) >> rootfs.gz
		done
	else
		cd $mnt/$KEYWORD
		cp $KERNEL /root
		for i in ${INITRD//,/ }; do
			cat $i >> /root/rootfs.gz
			n=$(stat -c %s /root/rootfs.gz)
			n=$(($n % 4))
			[ $n -eq 0 ] && continue
			dd if=/dev/zero bs=1 count=$((4 - $n)) >> /root/rootfs.gz
		done
		cd /root
	fi
	if [ -z "$READONLY" ] && [ "$SAVEDEFAULT" ] &&
	   [ -s $mnt/$SAVEDEFAULT/config.txt ]; then
	   	cp $mnt/menu.txt /tmp
		sed -i '/^default/d' /tmp/menu.txt
		echo "default=$SAVEDEFAULT" >> /tmp/menu.txt
		mount -o remount,rw $mnt
		cp /tmp/menu.txt $mnt/menu.txt
	fi
	[ "$INITRD" ] && INITRD="--initrd rootfs.gz"

	kexec -l $(basename $KERNEL) $INITRD --command-line \
		"$(sed 's|  .*||' /proc/cmdline)  $CMDLINE" --atags
	KEXEC="kexec -e" ;;

esac

umount $mnt
umount /sys
umount /proc
$KEXEC
exec /init
