#!/bin/sh
#
# /etc/init.d/rcS : Initial boot script for SliTaz ARM
# Config file is  : /etc/rcS.conf
#
# rcS is the main initialization script used to check fs, mount, clean,
# run scripts and start daemons. This is a custom script for ARM to get
# a faster boot and skip things like handling cdrom.
#
# Copyright (C) 2012-2014 SliTaz ARM - BSD License
#
. /lib/libtaz.sh
. /etc/rcS.conf

# Set default path
export PATH=/bin:/sbin:/usr/bin:/usr/sbin

echo $(colorize 34 "Processing: /etc/init.d/rcS")

# Mount all from: /etc/fstab
mkdir -p /dev/pts /dev/shm
echo "Mounting filesystems in fstab..."
mount -a

# Mount /run as tmpfs so runtime data are not written to disk
echo -n "Mounting tmpfs filesystem on: /run"
mount -t tmpfs tmpfs /run
status

# Be quiet at boot
echo "0 0 0 0" > /proc/sys/kernel/printk

# Use udev and disable hotplug helper (udevd listens to netlink)
if [ -x "/sbin/udevd" ]; then
	echo "" > /proc/sys/kernel/hotplug
	echo "Starting udevd & udevadm [trigger settle]..."
	udevd --daemon 2>/dev/null &&
	udevadm trigger && udevadm settle --timeout=120
	status
else
	# Fallback to Busybox mdev
	echo -n "Creating device nodes: /sbin/mdev -s"
	mdev -s && echo "/sbin/mdev" > /proc/sys/kernel/hotplug
	status
fi

# Clean up
echo -n "Cleaning up the system..."
rm -rf /tmp /var/run && ln -s /run /var/run
mkdir /tmp && chmod 1777 /tmp
status

# Start syslogd and klogd.
echo -n "Starting system log daemons: syslogd/klogd..."
syslogd -s $SYSLOGD_SIZE && klogd
status

# Load all modules from config file
if [ "$LOAD_MODULES" ]; then
	colorize 33 "Loading Kernel modules..."
	for mod in $LOAD_MODULES; do
		modprobe -v $mod
	done
fi

# Start all init scripts
for script in $RUN_SCRIPTS; do
	colorize 34 "Processing: /etc/init.d/$script"
	/etc/init.d/$script
done

# Start all daemons
if [ "$RUN_DAEMONS" ]; then
	colorize 33 "Starting all daemons..."
	for daemon in $RUN_DAEMONS; do
		/etc/init.d/$daemon start
	done
fi

# System time option
if fgrep -q 'rdate' /proc/cmdline; then
	echo -n "Setting system date..."
	rdate -s 203.129.68.14 2>/dev/null
	status
fi

newline
colorize 32 "$MESSAGE"

# Back to a verbose mode but wait to finish with a clean boot
(sleep 4; echo "7 4 1 7" > /proc/sys/kernel/printk) &
